DROP TABLE IF EXISTS field;
DROP TABLE IF EXISTS index;
DROP TABLE IF EXISTS page;
DROP TABLE IF EXISTS lemma;
DROP TABLE IF EXISTS site;
DROP CAST IF EXISTS (varchar AS status_enum);
DROP TYPE IF EXISTS status_enum;

CREATE TYPE status_enum AS ENUM('INDEXING', 'INDEXED', 'FAILED');
CREATE CAST (varchar AS status_enum) WITH INOUT AS IMPLICIT;

CREATE TABLE IF NOT EXISTS site (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	status status_enum,
	status_time TIMESTAMP NOT NULL,
	last_error TEXT,
	url VARCHAR(255) NOT NULL,
	name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS field (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	selector VARCHAR(255) NOT NULL,
	weight FLOAT NOT NULL
);

CREATE SEQUENCE IF NOT EXISTS page_id_seq;
CREATE TABLE IF NOT EXISTS page (
	id INTEGER NOT NULL NOT NULL DEFAULT nextval('page_id_seq') PRIMARY KEY,
	site_id INTEGER NOT NULL,
	path TEXT NOT NULL,
	code INTEGER NOT NULL,
	content TEXT NOT NULL,
	FOREIGN KEY (site_id) REFERENCES site (id)
);
ALTER SEQUENCE page_id_seq OWNED BY page.id INCREMENT BY 3;

CREATE TABLE IF NOT EXISTS lemma (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	site_id INTEGER NOT NULL,
	lemma VARCHAR(255) NOT NULL,
	frequency INTEGER NOT NULL,
	FOREIGN KEY (site_id) REFERENCES site (id)
);

CREATE TABLE IF NOT EXISTS index (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	page_id INTEGER NOT NULL,
	lemma_id INTEGER NOT NULL,
	rank FLOAT NOT NULL,
	FOREIGN KEY (page_id) REFERENCES page (id),
  	FOREIGN KEY (lemma_id) REFERENCES lemma (id)
);

INSERT INTO field (name, selector, weight)
VALUES ('title', 'title', 1.0),
	   ('body', 'body', 0.8);